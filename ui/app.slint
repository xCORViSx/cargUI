import { Button, LineEdit, ScrollView, TextEdit } from "std-widgets.slint";
import "../assets/Bronzier Rusty.otf";

export struct CommandEntry {
    label: string,
    selected: bool,
    compact: bool,
}

component CommandButton inherits Rectangle {
    in property <CommandEntry> entry;
    in property <int> index;
    in property <bool> disabled;
    callback pressed(extend: bool);

    height: entry.compact ? 34px : 60px;
    border-radius: entry.compact ? 10px : 12px;
    background: entry.selected ? #f8b677 : #1C1C1E;
    animate background { duration: 140ms; }
    animate opacity { duration: 140ms; }

    states [
        disabled when disabled: {
            opacity: 0.4;
        }
    ]

    Text {
        text: entry.label;
        color: #f6f5f1;
        font-size: entry.compact ? 14px : 18px;
        font-weight: entry.compact ? 500 : 600;
        horizontal-alignment: center;
        vertical-alignment: center;
    }

    TouchArea {
        enabled: !disabled;
        pointer-event(event) => {
            if (event.kind == PointerEventKind.up && event.button == PointerEventButton.left) {
                root.pressed(event.modifiers.shift);
                return EventResult.accept;
            }
            EventResult.reject
        }
    }
}

component ReleaseSwitch inherits Rectangle {
    in-out property <bool> selected;
    in property <bool> enabled;
    height: 36px;
    width: 160px;
    background: transparent;

    track := Rectangle {
        width: parent.width;
        height: parent.height;
        background: #C46D2B;
        border-radius: parent.height / 2;
        border-width: 1px;
        border-color: #1C1C1E33;

        slider := Rectangle {
            width: parent.width / 2;
            height: parent.height;
            background: #1C1C1E;
            border-radius: parent.height / 2;
            x: selected ? parent.width / 2 : 0px;
            animate x { duration: 150ms; easing: ease-in-out; }
        }

        HorizontalLayout {
            spacing: 0px;
            Text {
                width: parent.width / 2;
                text: "Debug";
                color: selected ? #1C1C1E : #E17B32;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-weight: 650;
                font-size: 13px;
            }
            Text {
                width: parent.width / 2;
                text: "Release";
                color: selected ? #E17B32 : #1C1C1E;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-weight: 650;
                font-size: 13px;
            }
        }
    }

    states [
        disabled when !enabled: {
            opacity: 0.35;
        }
    ]

    TouchArea {
        enabled: enabled;
        clicked => { root.selected = !root.selected; }
    }
}

export component AppWindow inherits Window {
    in-out property <[CommandEntry]> primary_commands;
    in-out property <[CommandEntry]> secondary_commands;
    in-out property <bool> running;
    in-out property <bool> release_enabled;
    in-out property <bool> release_selected;
    in-out property <string> cargo_args_text;
    in-out property <string> program_args_text;
    in-out property <string> custom_command_text;
    in-out property <string> output_text;
    in-out property <string> status_text;

    callback primary_command_clicked(index: int, extend: bool);
    callback secondary_command_clicked(index: int, extend: bool);
    callback run_requested();
    callback stop_requested();
    callback workspace_select_requested();
    callback settings_requested();

    preferred-width: 400px;
    preferred-height: 500px;
    min-width: 400px;
    min-height: 500px;
    max-width: 400px;
    max-height: 500px;
    background: #D68643;
    forward-focus: root_scope;

    root_scope := FocusScope {
        focus-on-click: true;

        key-pressed(event) => {
            if (!root.running && (event.text == "\u{000a}" || event.text == "\u{000d}")) {
                run_requested();
                return EventResult.accept;
            }
            if (root.running && event.modifiers.control && (event.text == "c" || event.text == "C")) {
                stop_requested();
                return EventResult.accept;
            }
            EventResult.reject
        }

        VerticalLayout {
            padding: 16px;

            Rectangle {
                background: #C46D2B;
                border-radius: 24px;
                drop-shadow-blur: 24px;
                drop-shadow-color: #5e3a1a40;

                VerticalLayout {
                    padding: 18px;
                    spacing: 14px;

                    HorizontalLayout {
                        spacing: 14px;
                        Rectangle {
                            width: 56px;
                            height: 56px;
                            border-radius: 12px;
                            background: #1C1C1E;
                            Text {
                                text: "C";
                                color: #f8b677;
                                font-size: 30px;
                                font-weight: 700;
                                horizontal-alignment: center;
                                vertical-alignment: center;
                            }
                            TouchArea {
                                clicked => { workspace_select_requested(); }
                            }
                        }
                        VerticalLayout {
                            spacing: 2px;
                            Text {
                                text: "cargUI";
                                color: #1C1C1E;
                                font-size: 34px;
                                font-family: "Bronzier";
                            }
                            Text {
                                text: root.running ? "busy" : "ready";
                                color: root.running ? #aa4e19 : #000000;
                                font-size: 12px;
                            }
                        }
                        Rectangle {
                            horizontal-stretch: 1;
                            height: 1px;
                            background: transparent;
                        }
                        Button {
                            text: "âš™";
                            width: 54px;
                            height: 54px;
                            enabled: !root.running;
                            clicked => { settings_requested(); }
                        }
                    }

                    HorizontalLayout {
                        spacing: 12px;
                        VerticalLayout {
                            horizontal-stretch: 1;
                            spacing: 6px;
                            Text { text: "Cargo args"; color: #000000; font-size: 12px; }
                            Rectangle {
                                horizontal-stretch: 1;
                                height: 34px;
                                border-radius: 10px;
                                background: #D68643;
                                border-width: 1px;
                                border-color: #1C1C1E;

                                LineEdit {
                                    text <=> root.cargo_args_text;
                                    placeholder-text: "--features ui --all";
                                    enabled: !root.running;
                                    horizontal-stretch: 1;
                                    width: parent.width;
                                    height: parent.height;
                                }
                            }
                        }
                        VerticalLayout {
                            horizontal-stretch: 1;
                            spacing: 6px;
                            Text { text: "Program args"; color: #000000; font-size: 12px; }
                            Rectangle {
                                horizontal-stretch: 1;
                                height: 34px;
                                border-radius: 10px;
                                background: #D68643;
                                border-width: 1px;
                                border-color: #1C1C1E;

                                LineEdit {
                                    text <=> root.program_args_text;
                                    placeholder-text: "-- logging info";
                                    enabled: !root.running;
                                    horizontal-stretch: 1;
                                    width: parent.width;
                                    height: parent.height;
                                }
                            }
                        }
                    }

                    HorizontalLayout {
                        spacing: 12px;

                        Rectangle {
                            horizontal-stretch: 1;
                            background: transparent;

                            VerticalLayout {
                                spacing: 2px;
                                Rectangle {
                                    height: 12px;
                                    horizontal-stretch: 1;
                                    background: transparent;
                                }
                                release_toggle := ReleaseSwitch {
                                    selected <=> root.release_selected;
                                    enabled: root.release_enabled && !root.running;
                                }
                            }
                        }

                        Rectangle {
                            horizontal-stretch: 1;
                            background: transparent;

                            HorizontalLayout {
                                spacing: 8px;

                                for entry[index] in root.primary_commands: CommandButton {
                                    entry: entry;
                                    index: index;
                                    disabled: root.running;
                                    min-width: 0px;
                                    horizontal-stretch: 1;
                                    pressed(extend) => { primary_command_clicked(index, extend); }
                                }
                            }
                        }
                    }

                    HorizontalLayout {
                        spacing: 6px;
                        horizontal-stretch: 1;

                        for entry[index] in root.secondary_commands: CommandButton {
                            entry: entry;
                            index: index;
                            disabled: root.running;
                            horizontal-stretch: 1;
                            pressed(extend) => { secondary_command_clicked(index, extend); }
                        }
                    }

                    HorizontalLayout {
                        spacing: 12px;
                        Text { text: "Custom"; color: #000000; font-size: 12px; vertical-alignment: center; }
                            custom_scope := FocusScope {
                                horizontal-stretch: 1;
                                focus-on-click: true;
                                key-pressed(event) => {
                                    if (!root.running && (event.text == "\u{000a}" || event.text == "\u{000d}")) {
                                        run_requested();
                                        return EventResult.accept;
                                    }
                                    EventResult.reject
                                }

                                Rectangle {
                                    horizontal-stretch: 1;
                                    height: 34px;
                                    border-radius: 10px;
                                    background: #D68643;
                                    border-width: 1px;
                                    border-color: #1C1C1E;

                                    LineEdit {
                                        text <=> root.custom_command_text;
                                        enabled: !root.running;
                                        placeholder-text: "fmt -- --check";
                                        horizontal-stretch: 1;
                                        width: parent.width;
                                        height: parent.height;
                                    }
                                }
                            }
                    }

                    VerticalLayout {
                        spacing: 6px;
                        vertical-stretch: 1;
                        Text { text: "Output"; color: #000000; font-weight: 600; }
                        Rectangle {
                            background: #1C1C1E;
                            border-radius: 12px;
                            min-height: 120px;
                            vertical-stretch: 1;

                            VerticalLayout {
                                width: parent.width;
                                height: parent.height;
                                padding: 10px;

                                ScrollView {
                                    horizontal-stretch: 1;
                                    vertical-stretch: 1;
                                    TextEdit {
                                        text: root.output_text;
                                        read-only: true;
                                        wrap: word-wrap;
                                    }
                                }
                            }
                        }
                    }

                    Text {
                        text: root.status_text;
                        color: #1C1C1E;
                        font-size: 12px;
                    }
                }
            }
        }
    }
}
